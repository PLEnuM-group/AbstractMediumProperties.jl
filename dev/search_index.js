var documenterSearchIndex = {"docs":
[{"location":"guide/","page":"Guide","title":"Guide","text":"CurrentModule = AbstractMediumProperties","category":"page"},{"location":"guide/#User-Guide","page":"Guide","title":"User Guide","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"This guide provides an overview of how to use the AbstractMediumProperties package.","category":"page"},{"location":"guide/#Defining-a-Custom-Medium","page":"Guide","title":"Defining a Custom Medium","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"To define a custom medium, create a new type that inherits from MediumProperties and implement the required methods.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"using AbstractMediumProperties\n\nstruct CustomMedium <: MediumProperties end\n\nfunction AbstractMediumProperties.pressure(medium::CustomMedium)\n    return 1.0 # Example pressure\nend\n\n# Implement other required methods...\n\nmedium = CustomMedium()\nprintln(AbstractMediumProperties.pressure(medium))","category":"page"},{"location":"guide/#Advanced-Usage","page":"Guide","title":"Advanced Usage","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"For advanced usage, refer to the API documentation and explore the available functions and types.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = AbstractMediumProperties","category":"page"},{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"This section provides a detailed reference for all functions and types defined in the AbstractMediumProperties module.","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [AbstractMediumProperties]","category":"page"},{"location":"api/#AbstractMediumProperties.DIPPR105Params","page":"API","title":"AbstractMediumProperties.DIPPR105Params","text":"DIPPR105Params\n\nParameters for the DIPPR105 formula\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractMediumProperties.DIPPR105","page":"API","title":"AbstractMediumProperties.DIPPR105","text":"DIPPR105(temperature::Real, params::DIPPR105Params=DDBDIPR105Params)\n\nUse DPPIR105 formula to calculate water density as function of temperature. temperature in K.\n\nReference: http://ddbonline.ddbst.de/DIPPR105DensityCalculation/DIPPR105CalculationCGI.exe?component=Water\n\nReturns density in kg/m^3\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractMediumProperties.absorption_length-Tuple{Any, MediumProperties}","page":"API","title":"AbstractMediumProperties.absorption_length","text":"absorption_length(wavelength, medium::MediumProperties)\n\nReturn absorption length at wavelength in units m.\n\nwavelength is expected to be in units nm.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.calc_quan_fry_params-Tuple{Real, Real, Real}","page":"API","title":"AbstractMediumProperties.calc_quan_fry_params","text":"calc_quan_fry_params(salinity::Real, temperature::Real, pressure::Real)\n\nHelper function to get the parameters for the Quan & Fry formula as function of salinity, temperature and pressure.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.cherenkov_angle-Tuple{Any, MediumProperties}","page":"API","title":"AbstractMediumProperties.cherenkov_angle","text":"cherenkov_angle(wavelength, medium::MediumProperties)\n\nCalculate the cherenkov angle (in rad) for wavelength.\n\nwavelength is expected to be in units nm.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.dispersion-Tuple{Any, MediumProperties}","page":"API","title":"AbstractMediumProperties.dispersion","text":"dispersion(wavelength, medium)\n\nReturn the dispersion dn/dλ at wavelength in units 1/nm.\n\nwavelength is expected to be in units nm.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.dispersion_fry-Tuple{T} where T<:Real","page":"API","title":"AbstractMediumProperties.dispersion_fry","text":"dispersion_fry(\n    wavelength::T;\n    salinity::Real,\n    temperature::Real,\n    pressure::Real) where {T <: Real}\n\nCalculate the dispersion (dn/dλ) for the Quan & Fry model. Wavelength is given in nm, salinity in permille, temperature in °C and pressure in atm\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.es_scattering-Union{Tuple{T}, Tuple{T, T}} where T<:Real","page":"API","title":"AbstractMediumProperties.es_scattering","text":"es_scattering(cos_theta::T, b::T) where {T<:Real}\n\nEinstein-Smoluchowsky Scattering PDF.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.es_scattering_cumulative-Union{Tuple{T}, Tuple{T, T}} where T<:Real","page":"API","title":"AbstractMediumProperties.es_scattering_cumulative","text":"es_scattering_integral(cos_theta::T, b::T) where {T<:Real}\n\nIntegral of ES scattering function from -1 to cos_theta\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.es_scattering_integral-Union{Tuple{T}, Tuple{T, T}} where T<:Real","page":"API","title":"AbstractMediumProperties.es_scattering_integral","text":"es_scattering_integral(cos_theta::T, b::T) where {T<:Real}\n\nAnti-derivative of the ES scattering function.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.generic_scattering_function-Union{Tuple{T}, NTuple{4, T}} where T<:Real","page":"API","title":"AbstractMediumProperties.generic_scattering_function","text":"generic_scattering_function(p0::T, p1::T, p2::T, p3::T) where {T<:Real}\n\nGeneric scattering function that can be used to sample from any 3rd order polynomial.\n\nReturns cos(scattering_angle).\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.group_refractive_index-Tuple{Any, Any}","page":"API","title":"AbstractMediumProperties.group_refractive_index","text":"group_refractive_index(wavelength, medium)\n\nReturn the group refractive index at wavelength.\n\nwavelength is expected to be in units nm.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.group_velocity-Tuple{Any, MediumProperties}","page":"API","title":"AbstractMediumProperties.group_velocity","text":"group_velocity(wavelength, medium)\n\nReturn the group_velocity in m/ns at wavelength.\n\nwavelength is expected to be in units nm.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.hg_scattering_func-Tuple{T} where T<:Real","page":"API","title":"AbstractMediumProperties.hg_scattering_func","text":"hg_scattering_func(g::Real)\n\nCUDA-optimized version of Henyey-Greenstein scattering in one plane.\n\nArguments\n\ng::Real: mean scattering angle\n\nReturns\n\ntypeof(g) cosine of a scattering angle sampled from the distribution\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.make_inverse_es_polynomial-Tuple{T} where T<:Real","page":"API","title":"AbstractMediumProperties.make_inverse_es_polynomial","text":"make_inverse_es_polynomial(b::T) where {T<:Real}\n\nMake a 3rd order polynomial that approximates the inverse of the ES scattering function.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.mixed_hg_generic_scattering_func-Union{Tuple{T}, Tuple{T, T, NTuple{4, T}}} where T<:Real","page":"API","title":"AbstractMediumProperties.mixed_hg_generic_scattering_func","text":"mixed_hg_es_scattering_func(g::Real, hg_fraction::Real, poly_coeffs::NTuple{4, Real})\n\nMixture model of HG and generic scattering function.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.mixed_hg_sl_scattering_func-Tuple{Real, Real}","page":"API","title":"AbstractMediumProperties.mixed_hg_sl_scattering_func","text":"mixed_hg_sl_scattering_func(g, hg_fraction)\n\nMixture model of HG and SL.\n\nArguments\n\ng::Real: mean scattering angle\nhg_fraction::Real: mixture weight of the HG component\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.mixed_hg_sl_scattering_func_ppc-Union{Tuple{T}, Tuple{T, T}} where T<:Real","page":"API","title":"AbstractMediumProperties.mixed_hg_sl_scattering_func_ppc","text":"mixed_hg_sl_scattering_func_ppc(g, hg_fraction)\n\nMixture model of HG and SL as implemented in PPC\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.phase_refractive_index-Tuple{Any, MediumProperties}","page":"API","title":"AbstractMediumProperties.phase_refractive_index","text":"phase_refractive_index(wavelength, medium)\n\nReturn the phase refractive index at wavelength.\n\nwavelength is expected to be in units nm.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.pressure-Tuple{MediumProperties}","page":"API","title":"AbstractMediumProperties.pressure","text":"pressure(::MediumProperties)\n\nThis function returns the pressure for a given medium.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.refractive_index_fry-Tuple{T} where T<:Real","page":"API","title":"AbstractMediumProperties.refractive_index_fry","text":"refractive_index_fry(wavelength, salinity, temperature, pressure)\n\nThe phase refractive index of sea water according to a model from Quan & Fry.\n\nwavelength is given in nm, salinity in permille, temperature in °C and pressure in atm\n\nThe original model is taken from: X. Quan, E.S. Fry, Appl. Opt., 34, 18 (1995) 3477-3480.\n\nAn additional term describing pressure dependence was included according to: Wolfgang H.W.A. Schuster, \"Measurement of the Optical Properties of the Deep Mediterranean - the ANTARES Detector Medium.\", PhD thesis (2002), St. Catherine's College, Oxford downloaded Jan 2011 from: http://www.physics.ox.ac.uk/Users/schuster/thesis0098mmjhuyynh/thesis.ps\n\nAdapted from clsim (©Claudio Kopper)\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.sca_len_part_conc-Tuple{T} where T<:Real","page":"API","title":"AbstractMediumProperties.sca_len_part_conc","text":"sca_len_part_conc(wavelength; vol_conc_small_part, vol_conc_large_part)\n\nCalculates the scattering length (in m) for a given wavelength based on concentrations of small (vol_conc_small_part) and large (vol_conc_large_part) particles. wavelength is given in nm, volconcsmallpart and volconclargepart in ppm\n\nAdapted from clsim ©Claudio Kopper\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.scattering_function-Tuple{MediumProperties}","page":"API","title":"AbstractMediumProperties.scattering_function","text":"scattering_function(medium::MediumProperties)\n\nReturn a scattering angle sampled from the scattering function of the medium.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.scattering_length-Tuple{Any, MediumProperties}","page":"API","title":"AbstractMediumProperties.scattering_length","text":"scattering_length(wavelength, medium::MediumProperties)\n\nReturn scattering length at wavelength in units m.\n\nwavelength is expected to be in units nm. Returned length is in units m.\n\n\n\n\n\n","category":"method"},{"location":"api/#AbstractMediumProperties.sl_scattering_func-Tuple{T} where T<:Real","page":"API","title":"AbstractMediumProperties.sl_scattering_func","text":"sl_scattering_func(g::Real)\n\nSimplified-Liu scattering angle function. Implementation from: https://user-web.icecube.wisc.edu/~dima/work/WISC/ppc/spice/new/paper/a.pdf\n\nArguments\n\ng::Real: mean scattering angle\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AbstractMediumProperties","category":"page"},{"location":"#AbstractMediumProperties","page":"Home","title":"AbstractMediumProperties","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for AbstractMediumProperties.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a set of tools and abstractions for working with medium properties in physics simulations.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, use the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"AbstractMediumProperties\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is a simple example of how to use the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using AbstractMediumProperties\n\n# Define a custom medium\nstruct CustomMedium <: MediumProperties end\n\n# Implement required methods\nfunction AbstractMediumProperties.pressure(medium::CustomMedium)\n    return 1.0 # Example pressure\nend\n\n# ...implement other required methods...\n\n# Create an instance of the custom medium\nmedium = CustomMedium()\n\n# Use the medium in calculations\nprintln(AbstractMediumProperties.pressure(medium))","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following sections provide detailed documentation for the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
